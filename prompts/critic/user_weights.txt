Included in this prompt are a series of proposed database table column index configurations, along with an associated reward and required storage size (in megabytes) of the indexes when deployed to the database. Your job is to evaluate the different candidate columns to be indexed and choose the columns that, when indexed, contribute most to maximizing the reward associated with it the configuration. In addition, you must take into account the associated index storage size: the greater the storage size, the greater the costs when deploying the index configuration. Therefore, you must weigh the tradeoff between an increase in a reward and a increase in storage size.

For more information on the datatypes of the columns that are being indexed, below is a SQL column creation schema:

{schema}

Below are the proposed columns to be indexed, along with the reward observed after the indexes are deployed and the associated storage size:

{configuration}

Output each column from all the proposed configurations along with a weight. This weight should reflect the degree to which the column, when indexed, contributes most to decreasing latency, while not having too high storage space overhead. 
The weights should be in the range from 0 to 1. The lower the weight, the less of a contribution the indexed column makes to decreasing the latency and/or leads to too high storage space, while a column with a higher weight is more impactful on reducing latency and has a smaller memory footprint.
The columns and their weights should be stored as key-value pairs in a JSON object, for example {{"<COLUMN_NAME>":"<WEIGHT>"}}

```json
{{<COLUMN-WEIGHT PAIRS HERE>}}
```